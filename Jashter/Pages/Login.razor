@page "/login"
@inject IAuthenticationService _authenticateionService
@inject NavigationManager _navigationManager

<div class="main-form">
    <div class="form-area">
        <h1>Sign in to Jashter</h1>
        <EditForm Model="@_model" OnValidSubmit="@SubmitLogin">
            <DataAnnotationsValidator />
            <div class="form-input">
                <div class="label">Username:</div>
                <InputText @bind-Value="@_model!.Username" class="form" />
            </div>
            <div class="form-input">
                <div class="label">Password:</div>
                <InputText @bind-Value="@_model!.Password" type="password" class="form" />
            </div>
            @if (_errorMsg is not null)
            {
                <div class="msg-error">
                    <div class="text-danger">@_errorMsg</div>
                </div>
            }
            <button type="submit">Login</button>
            <hr />
            <div class="text-center">or</div>
            <button @onclick="@(() => _navigationManager.NavigateTo("create"))">Create account</button>
        </EditForm>
    </div>
</div>
@code {
    private LoginFormModel _model = new LoginFormModel();
    private string? _errorMsg = null;

    private async Task SubmitLogin()
    {
        _errorMsg = null;
        LoginRequestDto loginDto = new LoginRequestDto
            {
                Username = _model!.Username,
                Password = _model!.Password
            };
        bool result = await _authenticateionService.LoginAsync(loginDto);
        if (result)
        {
            _navigationManager.NavigateTo("");
        }
        else
        {
            _errorMsg = "Authentication failed.";
            StateHasChanged();
        }
    }
}

